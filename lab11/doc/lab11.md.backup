# Лабораторна робота №11. Взаємодія з користувачем шляхом механізму введення/виведення

## 1 Вимоги

### 1.1 Розробник

* Рекало Іван Сергійович;
* студент групи КН923г;
* 08-чер-2024.

### 1.2 Завдання

Розробити програму, яка виконує операції з матрицями: введення, виведення та додавання двох матриць.

## 2 Опис програми

### 2.1 Функціональне призначення

Програма призначена для виконання базових операцій з матрицями розміру 3x3: введення елементів, виведення матриць та додавання двох матриць.

### 2.2 Опис логічної структури

#### Функція введення елементів матриці
```C
void inputMatrix(float matrix[ROWS][COLS], const char *name)
```

*Призначення*: здійснює введення елементів матриці від користувача.

*Опис роботи*: функція приймає матрицю і її назву, запитує користувача ввести елементи матриці і заповнює її відповідними значеннями.

**Аргументи**:

- matrix - матриця, яку необхідно заповнити;
- name - назва матриці для виведення в підказці.

#### Функція виведення матриці
```C
void printMatrix(float matrix[ROWS][COLS])
```

*Призначення*: виводить елементи матриці на екран.

*Опис роботи*: функція приймає матрицю, форматує її елементи у вигляді рядків та виводить на екран.

**Аргументи**:

- matrix - матриця, яку необхідно вивести.

#### Функція додавання двох матриць
```C
void addMatrices(float result[ROWS][COLS], float matrix1[ROWS][COLS], float matrix2[ROWS][COLS])
```

*Призначення*: здійснює додавання двох матриць.

*Опис роботи*: функція приймає дві матриці, додає їх відповідні елементи та зберігає результат у третій матриці.

**Аргументи**:

- result - матриця для збереження результату додавання;
- matrix1 - перша матриця;
- matrix2 - друга матриця.

#### Головна функція
```C
int main()
```

*Призначення*: основна функція, яка викликається при запуску програми.

*Опис роботи*: Визначає дві матриці з початковими значеннями. Викликає функцію для додавання матриць. Виводить матрицю на екран.

#### Структура проекту
```
                 └── lab11/
                     ├── Makefile
                     ├── Doxyfile
                     ├── README.md
                     ├── assets
                         └── input.txt
                     ├── doc
                         └── lab11.md
                     ├── src
                         ├── lib.c
                         ├── lib.h
                         ├── main.c
                     └── test
                         └── test.c
```

### 2.3 Важливі фрагменти програми

#### Введення елементів матриці
```C
void inputMatrix(float matrix[ROWS][COLS], const char *name) {
    write(1, "Введіть елементи матриці ", strlen("Введіть елементи матриці "));
    write(1, name, strlen(name));
    write(1, ":\n", strlen(":\n"));

    for (int i = 0; i < ROWS; ++i) {
        for (int j = 0; j < COLS; ++j) {
            char prompt[50];
            sprintf(prompt, "Елемент [%d][%d]: ", i + 1, j + 1);
            char input[20];
            read(0, input, sizeof(input));
            sscanf(input, "%f", &matrix[i][j]);
        }
    }
```

#### Виведення матриці
```C
void printMatrix(float matrix[ROWS][COLS]) {
    for (int i = 0; i < ROWS; ++i) {
        char row[100] = {0};
        for (int j = 0; j < COLS; ++j) {
            char temp[20];
            sprintf(temp, "%.2f ", matrix[i][j]);
            strcat(row, temp);
        }
        strcat(row, "\n");
        write(1, row, strlen(row));
    }
}
```

#### Додавання матриць
```C
void addMatrices(float result[ROWS][COLS], float matrix1[ROWS][COLS], float matrix2[ROWS][COLS]) {
    for (int i = 0; i < ROWS; ++i) {
        for (int j = 0; j < COLS; ++j) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
}
```

#### Перевірка відсутності витоків пам'яті за допомогою утиліти valgrind
```C
==5393== Memcheck, a memory error detector
==5393== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5393== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==5393== Command: ./main
==5393== 
Результат додавання матриць:
10.00 10.00 10.00 
10.00 10.00 10.00 
10.00 10.00 10.00 
==5393== 
==5393== HEAP SUMMARY:
==5393==     in use at exit: 0 bytes in 0 blocks
==5393==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==5393== 
==5393== All heap blocks were freed -- no leaks are possible
==5393== 
==5393== For lists of detected and suppressed errors, rerun with: -s
==5393== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
```

#### Модульний тест
```C
Process 5528 launched: '/home/banch1k/Стільниця/programing-Recalo/lab11/dist/test.bin' (x86_64)
Матриці рівні з урахуванням допустимої похибки.
Process 5528 stopped
```

## 3 Варіанти використання

#### Програма може бути використана для:

1. Навчальних цілей.
2. Проведення базових операцій з матрицями.
3. Демонстрації принципів роботи функцій введення та виведення.

## Висновки

Лабораторна робота навчила нас виконувати базові операції з матрицями: введення, виведення та додавання. Ця програма може бути корисною у навчальних цілях та для розв'язання завдань, що вимагають роботи з матрицями.