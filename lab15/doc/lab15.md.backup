# Лабораторна робота №15. Динамічні масиви

## 1 Вимоги

### 1.1 Розробник

* Рекало Іван Сергійович;
* студент групи КН923г;
* 12-чер-2024.

### 1.2 Завдання

Реалізувати динамічний масив елементів структури Audience та виконати додаткові завдання зі структурою:
- вивід вмісту списку на екран;
- пошук аудиторій, що вміщують більше заданої кількості осіб;
- додавання об’єкта у кінець списку;
- видалення об’єкта зі списку за індексом;
- сортування вмісту списку за кількістю місць.

## 2 Опис програми

### 2.1 Функціональне призначення

Програма призначена для керування списком аудиторій, включаючи додавання, видалення, сортування та пошук аудиторій за різними критеріями.

### 2.2 Опис логічної структури

#### Функція ініціалізації списку
```C
void initList(AudienceList *list);
```

*Призначення*: Ініціалізує порожній список аудиторій.

*Опис роботи*: Виділяє пам'ять для початкового масиву аудиторій та встановлює початковий розмір списку.

*Аргументи*:

- list - список аудиторій

#### Функція додавання аудиторії
```C
void addAudience(AudienceList *list, Audience audience);
```

*Призначення*: Додає нову аудиторію до кінця списку.

*Опис роботи*: Якщо поточний масив заповнений, збільшує його вмістимість удвічі. Додає нову аудиторію до кінця масиву.

*Аргументи*:

- audience - нова аудиторія для додавання.

#### Функція виводу списку на екран
```C
void printList(const AudienceList *list);
```

*Призначення*: Виводить на екран всі аудиторії зі списку.

*Опис роботи*: Перебирає всі аудиторії у списку та виводить їх імена та вмістимість.

#### Функція пошуку великих аудиторій
```C
void findLargeAudiences(const AudienceList *list, int minCapacity);
```

*Призначення*: Знаходить аудиторії, що вміщують більше заданої кількості осіб.

*Опис роботи*: Перебирає всі аудиторії у списку та виводить ті, що мають вмістимість більше за задану.

*Аргументи*:

- minCapacity - мінімальна вмістимість для пошуку.

#### Функція видалення аудиторії за індексом
```C
void removeAudience(AudienceList *list, int index);
```

*Призначення*: Видаляє аудиторію зі списку за заданим індексом.

*Опис роботи*: Переміщує всі елементи після видаленої аудиторії на одну позицію назад.

*Аргументи*:

- index - індекс аудиторії для видалення.

#### Функція сортування списку
```C
void sortList(AudienceList *list, int (*compare)(const void *, const void *));
```

*Призначення*: Сортує список аудиторій за заданим критерієм.

*Опис роботи*: Використовує стандартну функцію qsort для сортування масиву аудиторій.

*Аргументи*:

- compare - функція порівняння двох елементів для сортування.

#### Функція порівняння аудиторій за кількістю місць
```C
int compareByCapacity(const void *a, const void *b);
```

*Призначення*: Порівнює дві аудиторії за їх вмістимістю.

*Опис роботи*: Повертає різницю між місткістю двох аудиторій.

*Аргументи*:

- a - перша аудиторія для порівняння.
- b - друга аудиторія для порівняння.

#### Головна функція
```C
int main();
```

*Призначення*: Основна функція, яка викликається при запуску програми.

*Опис роботи*: Ініціалізує список, додає кілька аудиторій, виконує різні операції зі списком (вивід, пошук, видалення, сортування) та звільняє пам'ять.

#### Структура проекту
```
                 └── lab15/
                     ├── Makefile
                     ├── Doxyfile
                     ├── README.md
                     ├── doc
                         └── lab15.md
                     ├── src
                         ├── list.c
                         ├── list.h
                         ├── main.c
                         ├── entity.c
                         ├── entity.h
                     └── test
                         └── test.c
```

### 2.3 Важливі фрагменти програми

#### Ініціалізація списку
```C
AudienceList list;
initList(&list);
```

#### Додавання аудиторій
```C
addAudience(&list, (Audience){"Аудиторія 1", 50});
addAudience(&list, (Audience){"Аудиторія 2", 200});
addAudience(&list, (Audience){"Аудиторія 3", 130});
```

#### Виведення списку на екран
```C
printf("Вміст списку:\n");
printList(&list);
```

#### Пошук великих аудиторій
```C
printf("\nАудиторії, що вміщують більше 150 осіб:\n");
findLargeAudiences(&list, 150);
```

#### Видалення аудиторії за індексом
```C
printf("\nВидалення аудиторії за індексом 1:\n");
removeAudience(&list, 1);
printList(&list);
```

#### Сортування списку за кількістю місць
```C
printf("\nСортування аудиторій за кількістю місць:\n");
sortList(&list, compareByCapacity);
printList(&list);
```

#### Перевірка відсутності витоків пам'яті за допомогою утиліти valgrind
```C
==22619== Memcheck, a memory error detector
==22619== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22619== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==22619== Command: ./main
==22619== 
Вміст списку:
Номер аудиторії: Аудиторія 1, Вмістимість: 50
Номер аудиторії: Аудиторія 2, Вмістимість: 200
Номер аудиторії: Аудиторія 3, Вмістимість: 130

Аудиторії, що вміщують більше 150 осіб:
Номер аудиторії: Аудиторія 2, Вмістимість: 200

Додавання нової аудиторії:
Номер аудиторії: Аудиторія 1, Вмістимість: 50
Номер аудиторії: Аудиторія 2, Вмістимість: 200
Номер аудиторії: Аудиторія 3, Вмістимість: 130
Номер аудиторії: Аудиторія 4, Вмістимість: 250

Видалення аудиторії за індексом 1:
Номер аудиторії: Аудиторія 1, Вмістимість: 50
Номер аудиторії: Аудиторія 3, Вмістимість: 130
Номер аудиторії: Аудиторія 4, Вмістимість: 250

Сортування аудиторій за кількістю місць:
Номер аудиторії: Аудиторія 1, Вмістимість: 50
Номер аудиторії: Аудиторія 3, Вмістимість: 130
Номер аудиторії: Аудиторія 4, Вмістимість: 250
==22619== 
==22619== HEAP SUMMARY:
==22619==     in use at exit: 0 bytes in 0 blocks
==22619==   total heap usage: 2 allocs, 2 frees, 1,584 bytes allocated
==22619== 
==22619== All heap blocks were freed -- no leaks are possible
==22619== 
==22619== For lists of detected and suppressed errors, rerun with: -s
==22619== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
```

#### Модульний тест
```C
./dist/test.bin
Вміст списку:
Номер аудиторії: Аудиторія 1, Вмістимість: 50
Номер аудиторії: Аудиторія 2, Вмістимість: 200
Номер аудиторії: Аудиторія 3, Вмістимість: 130

Аудиторії, що вміщують більше 150 осіб:
Номер аудиторії: Аудиторія 2, Вмістимість: 200

Додавання нової аудиторії:
Номер аудиторії: Аудиторія 1, Вмістимість: 50
Номер аудиторії: Аудиторія 2, Вмістимість: 200
Номер аудиторії: Аудиторія 3, Вмістимість: 130
Номер аудиторії: Аудиторія 4, Вмістимість: 250

Видалення аудиторії за індексом 1:
Номер аудиторії: Аудиторія 1, Вмістимість: 50
Номер аудиторії: Аудиторія 3, Вмістимість: 130
Номер аудиторії: Аудиторія 4, Вмістимість: 250

Сортування аудиторій за кількістю місць:
Номер аудиторії: Аудиторія 1, Вмістимість: 50
Номер аудиторії: Аудиторія 3, Вмістимість: 130
Номер аудиторії: Аудиторія 4, Вмістимість: 250

Тест завершено успішно
```

## 3 Варіанти використання

#### Програма може бути використана для:

1. Управління списком аудиторій.
2. Пошуку та сортування аудиторій за різними критеріями.

## Висновки

Лабораторна робота навчила нас працювати з динамічними масивами, реалізовувати операції додавання, видалення, сортування та пошук.